name: Application build and test
on:
    push:
        paths-ignore:
            - 'README.md'
            - '.github/dependabot.yml'
            - '.github/technolinator.yml'
env:
    CDXGEN_VERSION: '8.1.9'
    CDXGEN_PLUGINS_VERSION: '1.0.5'
    semantic_version: '19.0.5'
    java_version: '17'
    mvn_parameter: '-B -ntp'
    image_name: 'europe-west4-docker.pkg.dev/mms-scs-service-x-1337/images/technolinator'
    ARTIFACTORY_URL: 'https://artifactory.cloud.mmst.eu/artifactory/libs-release'
    ARTIFACTORY_ID: "artifactory.cloud.mmst.eu"
jobs:
    ci:
        name: Application Build
        runs-on: ubuntu-latest
        if: github.actor != 'dependabot[bot]'
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  java-version: '${{ env.java_version }}'
                  distribution: 'temurin'

            - name: Create Maven settings.xml
              uses: whelk-io/maven-settings-xml-action@v21
              with:
                  servers: '[{ "id": "${{ env.ARTIFACTORY_ID }}", "username": "${{ secrets.CLP_ARTIFACTORY_SVCACC_USERNAME }}", "password": "${{ secrets.CLP_ARTIFACTORY_SVCACC_APIKEY }}" }]'
                  repositories: '[{ "id": "${{ env.ARTIFACTORY_ID }}", "url": "${{ env.ARTIFACTORY_URL }}" }]'

            - name: Getting next release version
              id: semantic
              uses: cycjimmy/semantic-release-action@v3
              with:
                  dry_run: true
                  semantic_version: ${{ env.semantic_version }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Install requirements
              run: |
                  npm install -g @cyclonedx/cdxgen@${{ env.CDXGEN_VERSION }}
                  npm install -g @cyclonedx/cdxgen-plugins-bin@${{ env.CDXGEN_PLUGINS_VERSION }}

            - name: Application Build and Test
              env:
                  sem_ver: ${{ steps.semantic.outputs.new_release_version }}
                  QUARKUS_GITHUB_APP_APP_ID: 32168
                  QUARKUS_GITHUB_APP_WEBHOOK_SECRET: for-my-eyes-only
                  QUARKUS_GITHUB_APP_PRIVATE_KEY: ''
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  DTRACK_APIKEY: theres-nothing-to-see-here
              run: |
                  if [ -n "$sem_ver" ]; then
                    mvn -B -ntp versions:set -DnewVersion="$sem_ver"
                  fi

                  mvn ${{ env.mvn_parameter }} clean install
                  VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.3.0:evaluate -Dexpression=project.version -q -DforceStdout)
                  echo VERSION="$VERSION" >> $GITHUB_ENV

            - name: Static code analysis
              if: github.ref == 'refs/heads/main' && steps.semantic.outputs.new_release_version != null
              env:
                SONAR_TOKEN: ${{ secrets.CLP_SONARQUBE_ACCESS_TOKEN }}
                SONAR_HOST: ${{ secrets.CLP_SONARQUBE_HOST_URL }}
                PROJECT_KEY: technolinator:main
              run: |
                  mvn ${{ env.mvn_parameter }} org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
                    -Dsonar.host.url="$SONAR_HOST" \
                    -Dsonar.login="$SONAR_TOKEN" \
                    -Dsonar.projectKey="$PROJECT_KEY" \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-report/jacoco.xml

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Docker build
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: src/main/docker/Dockerfile
                  tags: ${{ env.image_name }}:${{ env.VERSION }}
                  load: true
                  build-args: |
                    CDXGEN_VERSION=${{ env.CDXGEN_VERSION }}
                    CDXGEN_PLUGINS_VERSION=${{ env.CDXGEN_PLUGINS_VERSION }}

            - name: Docker structure test
              run: |
                  sudo curl -Lso /usr/local/bin/container-structure-test https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
                  sudo chmod a+x /usr/local/bin/container-structure-test

                  container-structure-test test --config src/main/docker/structure-test.yaml --image ${{ env.image_name }}:${{ env.VERSION }}

            - uses: 'google-github-actions/auth@v1'
              if: github.ref == 'refs/heads/main'
              with:
                  credentials_json: '${{ secrets.GCP_CONTAINER_REGISTRY_SERVICE_ACCOUNT }}'

            - name: Setup gcloud CLI
              if: github.ref == 'refs/heads/main'
              uses: google-github-actions/setup-gcloud@v1
              with:
                  version: '415.0.0'

            - name: Docker push
              if: github.ref == 'refs/heads/main' && steps.semantic.outputs.new_release_version != null
              run: |
                  # configure docker to use Google Container Registry
                  gcloud auth configure-docker europe-west4-docker.pkg.dev
                  # upload image
                  docker push ${{ env.image_name }}:${{ env.VERSION }}

            - name: Create Release
              if: github.ref == 'refs/heads/main' && steps.semantic.outputs.new_release_version != null
              uses: cycjimmy/semantic-release-action@v3
              with:
                  semantic_version: ${{ env.semantic_version }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
