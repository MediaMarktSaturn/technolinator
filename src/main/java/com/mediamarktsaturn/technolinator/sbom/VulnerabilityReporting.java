package com.mediamarktsaturn.technolinator.sbom;

import com.mediamarktsaturn.technolinator.Result;
import com.mediamarktsaturn.technolinator.os.ProcessHandler;
import io.quarkus.logging.Log;
import io.smallrye.mutiny.Uni;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

public abstract class VulnerabilityReporting {
    protected static final String OUTPUT_FILE = "report.txt";

    protected static final Uni<Result<VulnerabilityReport>> noReport = Uni.createFrom().item(Result.success(VulnerabilityReport.none()));

    abstract public Uni<Result<VulnerabilityReport>> createVulnerabilityReport(Path sbomFile, String projectName);

    Result<VulnerabilityReport> createReport(ProcessHandler.ProcessResult result, Path reportDir, String projectName) {
        return switch (result) {
            case ProcessHandler.ProcessResult.Success s -> parseReport(reportDir, projectName);
            case ProcessHandler.ProcessResult.Failure f -> Result.failure(f.cause());
        };
    }

    Result<VulnerabilityReport> parseReport(Path reportDir, String projectName) {
        var reportFile = reportDir.resolve(OUTPUT_FILE);
        try {
            if (Files.isReadable(reportFile)) {
                String report = Files.readString(reportFile);
                return Result.success(VulnerabilityReport.report(report, projectName));
            } else {
                return Result.success(VulnerabilityReport.none());
            }
        } catch (IOException e) {
            Log.errorf(e, "Failed to read vulnerability report from %s", reportFile);
            return Result.failure(e);
        }
    }

    public sealed interface VulnerabilityReport {
        record Report(String text, String projectName) implements VulnerabilityReport {
        }

        record None() implements VulnerabilityReport {
        }

        static VulnerabilityReport report(String text, String projectName) {
            return new Report(text, projectName);
        }

        static VulnerabilityReport none() {
            return new None();
        }
    }
}
