package com.mediamarktsaturn.technolinator.config;

import com.mediamarktsaturn.technolinator.sbom.DepscanClient;
import com.mediamarktsaturn.technolinator.sbom.GrypeClient;
import com.mediamarktsaturn.technolinator.sbom.VulnerabilityReporting;
import io.quarkus.arc.DefaultBean;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.Dependent;
import jakarta.enterprise.inject.Produces;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import java.util.Optional;

@Dependent
public class VulnerabilityReportingConfig {

    private final VulnerabilityReporting reporter;

    public VulnerabilityReportingConfig(
        @ConfigProperty(name = "app.pull_requests.analyzer")
        String analyzerName,
        @ConfigProperty(name = "grype.template")
        Optional<String> grypeTemplateFile,
        @ConfigProperty(name = "grype.config")
        Optional<String> grypeConfigFile,
        @ConfigProperty(name = "depscan.template")
        Optional<String> depscanTemplateFile) {
        if ("depscan".equalsIgnoreCase(analyzerName)) {
            reporter = new DepscanClient(depscanTemplateFile);
        } else if ("grype".equalsIgnoreCase(analyzerName)) {
            reporter = new GrypeClient(grypeTemplateFile, grypeConfigFile);
        } else {
            throw new IllegalStateException("There's no analyzer '" + analyzerName + "'");
        }
    }

    @Produces
    @DefaultBean
    @ApplicationScoped
    public VulnerabilityReporting produceReporter() {
        return reporter;
    }

}
